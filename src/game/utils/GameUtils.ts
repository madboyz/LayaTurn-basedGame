import { Delay } from "../../framework/utils/Delay";
import { Alert } from "../ui/compent/Alert";
import { CommonControl } from "../common/control/CommonControl";
import { AoiInfo } from "../aoi/AoiInfo";
import { RoleView } from "../battle/role/RoleView";
import { Role } from "../battle/role/Role";
import { SGameData } from "../../net/data/SGameData";
import { STeamData } from "../team/STeamData";
import { SRoleData } from "../../net/data/SRoleData";
import { HtmlUtils } from "./HtmlUtils";

export class GameUtils {
    public static curBigState:boolean = false;//当前聊天框是否是大的
    public static TimeStamp:number;//当前服务器时间戳
    public static openSeverTimeStamp:number;//开服时间戳
    constructor() {
        
    }

    public static RandNameBySex(sex: number)
    {
        let sign_ = ["丶", "。", "|", "@", "_", "X"];
        let first_name_a_ = ["卫", "秦", "蚩", "吕", "施", "孔", "姜", "戚", "邹", "柏", "水", "云", "郎", "苗", "凤", "花", "方", "柳", "史", "岑", "雷", "殷", "萧", "尹", "狄", "明", "计", "成", "庞", "熊", "纪", "舒", "屈", "项", "祝", "蓝", "童", "梅", "钟", "夏", "凌", "霍", "虞", "万", "莫", "干", "龚", "程", "邢", "陆", "曲", "羿", "段", "巫", "班", "秋", "仲", "伊", "宫", "仇", "武", "景", "詹", "龙", "叶", "黎", "印", "宿", "白", "卓", "屠", "蒙", "池", "苍", "姬", "申", "桑", "燕", "晏", "柴", "阎", "连", "古", "易", "步", "文", "师", "勾", "敖", "空", "沙", "琴", "楼", "风", "木", "京",
            "欧阳", "太史", "端木", "上官", "司马", "东方", "独孤", "南宫", "闻人", "夏侯", "诸葛", "尉迟", "赫连", "皇甫", "宗政", "公冶", "太叔", "申屠", "公孙", "慕容", "钟离", "长孙", "宇文", "司徒", "司空", "巫马", "公良", "拓跋", "轩辕", "令狐", "百里", "呼延", "东郭", "南门", "左丘", "西门", "南荣", "仲长", "子书", "子桑", "东门", "安陵", "西陵", "安平", "白马", "北宫", "东野", "方雷", "丰将", "封人", "浮丘", "高辛", "贺兰", "柳下", "平陵", "青阳", "容成", "尚方", "吐贺", "完颜", "西乡", "西野", "辛垣", "延陵", "耶律", "中野", "中英"];
        let last_name_a_ = ["世", "舜", "丞", "仁", "仇", "仓", "仕", "仞", "修", "儒", "俊", "剑", "嗣", "士", "守", "宗", "宣", "宰", "尊", "崇", "川", "州", "巡", "帅", "庚", "战", "才", "承", "斋", "昌", "晁", "曾", "玮", "琛", "琮", "瑜", "生", "畴", "石", "磊", "祥", "禅", "穆", "馥", "筠", "竹", "霭", "枫", "嵘", "华", "明", "昭", "星", "毓", "璧", "凡", "竣", "综", "缜", "绪", "尤", "烈", "轼", "轩", "子", "杰", "碧", "天", "乐", "东", "铠", "铸", "铿", "锋", "镰", "旭", "骏", "骥", "驹", "骄", "诚", "赐", "慕", "端", "征", "坚", "建", "弓", "强", "彦", "御", "悍", "旷", "昂", "冀", "凯", "啸", "柴", "林", "森", "寒", "魁", "魏", "鲛", "鲲", "鹰", "宾", "山", "彪", "胜", "浩", "涛", "瀚", "瀛", "沧", "虚", "豪", "豹", "阔", "雄", "霆", "震", "荣", "草", "烟", "芮", "蓝", "水", "淞", "湾", "冷", "冽", "霖", "珂", "韩", "瑞", "风", "亮", "仑", "力", "卓", "哲", "展", "帝", "弛", "律", "德", "志", "忠", "振", "挺", "昊", "晋", "朗", "段", "泰", "滕", "炅", "炜", "煜", "煊", "炎", "玄", "雁", "锦", "越", "希", "韵", "银", "纹", "爽", "融", "亚", "烁", "园", "炫", "勇", "君", "黎", "贤", "金", "鑫", "辉", "墨", "欧", "友", "闻", "问", "安邦", "安怡", "安易", "安志", "彬彬", "斌斌", "博明", "博容", "博文", "博延", "博易", "博远", "成济", "成礼", "成龙", "成仁", "成双", "成文", "承安", "承恩", "承天", "承望", "承宣", "承悦", "承允", "承泽", "承志", "德海", "德华", "德辉", "德惠", "德容", "德润", "德寿", "德馨", "德义", "德庸", "德佑", "德宇", "德元", "飞尘", "飞光", "飞翰", "飞鸿", "飞虎", "飞龙", "飞鸾", "飞鸣", "飞鹏", "飞扬", "飞星", "飞羽", "飞雨", "风华", "丰羽", "高岑", "高畅", "高轩", "光济", "光熙", "光耀", "国源", "冠宇", "冠玉", "翰飞", "翰海", "翰墨", "翰音", "瀚漠", "昊苍", "昊空", "昊乾", "昊穹", "昊然", "昊天", "昊焱", "昊英", "皓轩", "和安", "和璧", "和畅", "和风", "和光", "和硕", "和颂", "和玉", "和裕", "和悦", "和韵", "鹤轩", "弘博", "弘济", "弘图", "宏儒", "鸿博", "鸿飞", "鸿轩", "鸿雪", "鸿羽", "华灿", "华藏", "嘉良", "嘉庆", "嘉胜", "嘉熙", "嘉歆", "嘉佑", "建安", "建业", "健柏", "金鑫", "锦程", "瑾瑜", "晋鹏", "经赋", "经亘", "经国", "经略", "经纶", "经纬", "经武", "经业", "经义", "景焕", "景辉", "景龙", "景明", "景山", "景胜", "景铄", "景天", "景同", "景曜", "靖琪", "君昊", "君浩", "俊才", "俊驰", "俊楚", "俊风", "俊豪", "俊杰", "俊良", "俊茂", "俊名", "俊人", "俊贤", "俊雄", "俊彦", "俊逸", "俊英", "俊语", "俊誉", "峻熙", "开宇", "凯风", "凯泽", "康顺", "康泰", "康裕", "乐安", "乐邦", "乐成", "乐池", "乐山", "乐生", "乐圣", "乐水", "乐天", "乐贤", "乐逸", "乐语", "黎昕", "立人", "立轩", "立群", "良材", "良工", "良吉", "茂勋", "茂彦", "明诚", "明辉", "明杰", "明俊", "明旭", "明轩", "朋义", "彭魄", "彭越", "彭泽", "鹏程", "鹏池", "鹏飞", "鹏赋", "鹏海", "鹏涛", "鹏天", "鹏翼", "鹏云", "溥心", "璞瑜", "浦和", "浦泽", "奇略", "奇思", "奇伟", "奇希", "奇逸", "奇正", "祺祥", "祺瑞", "荣轩", "锐翰", "锐逸", "锐泽", "睿慈", "睿思", "绍辉", "绍钧", "绍祺", "绍元", "思聪", "思淼", "思源", "思远", "思博", "斯年", "斯伯", "泰和", "泰鸿", "泰华", "泰清", "泰然", "天成", "天罡", "天翰", "天华", "天骄", "天空", "天瑞", "天逸", "天佑", "天宇", "天元", "天泽", "天纵", "同方", "同甫", "同光", "同和", "同化", "同济", "巍然", "巍奕", "伟祺", "伟彦", "伟晔", "伟泽", "温纶", "温书", "温瑜", "文柏", "文昌", "文栋", "文赋", "文光", "文翰", "文乐", "文山", "文石", "文星", "文轩", "文彦", "文曜", "文斌", "向晨", "向笛", "翔宇", "心水", "心思", "欣然", "欣怡", "欣怿", "欣悦", "新翰", "新霁", "信鸿", "信然", "兴邦", "兴修", "星辰", "星驰", "星光", "星汉", "星河", "星华", "星晖", "星剑", "星雨", "星渊", "修诚", "修杰", "修谨", "修筠", "修然", "修雅", "修真", "修竹", "修贤", "旭尧", "炫明", "雪松", "雪风", "雅畅", "雅逸", "炎彬", "阳冰", "阳辉", "阳嘉", "阳秋", "阳朔", "阳曦", "阳旭", "阳炎", "阳曜", "阳羽", "阳泽", "逸仙", "宜春", "宜然", "宜修", "意智", "懿轩", "英卫", "英武", "英悟", "英彦", "英逸", "英卓", "永怡", "永春", "永丰", "永康", "永宁", "永寿", "永思", "永逸", "永元", "永贞", "咏思", "宇寰", "宇文", "雨伯", "雨星", "雨泽", "玉宸", "玉成", "玉龙", "玉泉", "玉山", "玉石", "玉书", "玉轩", "玉韵", "玉泽", "煜祺", "元化", "元基", "元嘉", "元驹", "元魁", "元良", "元龙", "元青", "元武", "元勋", "元忠", "蕴涵", "正浩", "正奇", "正卿", "正雅", "志泽", "智渊", "子安", "子晋", "子墨", "子轩", "自怡", "自珍", "曾琪", "泽宇", "泽语", "安安", "安然", "北辰", "布侬", "畅畅", "朝旭", "晨旭", "初阳", "春华", "丁辰", "芳泽", "甘泽", "桂枫", "桂华", "含景", "紫杉", "珠轩", "云飞", "晏然", "如风", "瑞锦", "韶华", "诗柳", "棠华", "陶然", "未央", "文墨", "小春", "小枫", "小楠", "小星", "小雨", "晓凡", "晓枫", "晓星", "笑寒", "宵月", "新语", "新月", "雪帆", "雪枫", "雪翎", "雪柳", "寻春", "玄清", "一璇", "萧玉", "杉月", "书语", "素华", "施然", "琼华", "清晖", "北嘉", "冰彦", "畅然", "灿灿", "唱月", "冰枫", "晨曦", "初然", "芳华", "甘雨", "云歌", "歌韵", "谷玉", "瑰玮", "桂帆", "海儿", "浩岚", "皓月", "河灵", "赫然", "华楚", "华乐", "华月", "吉帆", "吉星", "吉玉", "吉月", "风云", "剑圣", "句号", "浩钜", "倩倩", "林安", "大千", "胡雨", "好山", "利达", "秦雄", "娇然", "锦凡", "锦文", "静枫", "筠竹", "兰泽", "乐然", "玲琅", "凌波", "凌春", "梦桐", "梦泽", "梦竹", "紫苏", "紫桐", "六维", "天干", "火干", "僮木", "火天", "水民", "子龙", "飞侠", "大侠", "珠玉", "竹筱", "竹萱", "竹雨", "竹月", "梓彤", "冰龙"];
        let first_name_b_ = ["卫", "秦", "蚩", "吕", "施", "孔", "姜", "戚", "邹", "柏", "水", "云", "郎", "苗", "凤", "花", "方", "柳", "史", "岑", "雷", "殷", "萧", "尹", "狄", "明", "计", "成", "庞", "熊", "纪", "舒", "屈", "项", "祝", "蓝", "童", "梅", "钟", "夏", "凌", "霍", "虞", "万", "莫", "干", "龚", "程", "邢", "陆", "曲", "羿", "段", "巫", "班", "秋", "仲", "伊", "宫", "仇", "武", "景", "詹", "龙", "叶", "黎", "印", "宿", "白", "卓", "屠", "蒙", "池", "苍", "姬", "申", "桑", "燕", "晏", "柴", "阎", "连", "古", "易", "步", "文", "师", "勾", "敖", "空", "沙", "琴", "楼", "风", "木", "京",
            "欧阳", "太史", "端木", "上官", "司马", "东方", "独孤", "南宫", "闻人", "夏侯", "诸葛", "尉迟", "赫连", "皇甫", "宗政", "公冶", "太叔", "申屠", "公孙", "慕容", "钟离", "长孙", "宇文", "司徒", "司空", "巫马", "公良", "拓跋", "轩辕", "令狐", "百里", "呼延", "东郭", "南门", "左丘", "西门", "南荣", "仲长", "子书", "子桑", "东门", "安陵", "西陵", "安平", "白马", "北宫", "东野", "方雷", "丰将", "封人", "浮丘", "高辛", "贺兰", "柳下", "平陵", "青阳", "容成", "尚方", "吐贺", "完颜", "西乡", "西野", "辛垣", "延陵", "耶律", "中野", "中英"];
        let last_name_b_ = ["俞", "倩", "倪", "佳", "仪", "宜", "女", "妃", "姗", "姿", "婵", "姣", "嫱", "姬", "娇", "娟", "嫣", "婕", "婧", "娴", "婉", "娜", "妹", "妍", "妙", "娆", "娥", "媚", "嫔", "婷", "玟", "环", "珊", "珠", "玲", "瑛", "琼", "瑶", "瑾", "珍", "琦", "玫", "琪", "琳", "琬", "瑗", "薇", "芬", "芳", "芯", "花", "茜", "荭", "荷", "莲", "莉", "莹", "菊", "芝", "萍", "燕", "苹", "蕊", "莎", "菀", "菁", "苑", "芸", "芊", "茗", "荔", "菲", "蓉", "英", "蓓", "蕾", "薰", "颖", "蔓", "莓", "曼", "淼", "滟", "滢", "淑", "洁", "清", "澜", "波", "渺", "漩", "漪", "涟", "冰", "霜", "雪", "霞", "香", "秋", "秀", "露", "飘", "柔", "凝", "晓", "欢", "巧", "美", "静", "惠", "翠", "雅", "红", "春", "岚", "兰", "羽", "素", "云", "丽", "俪", "囡", "彩", "彤", "怜", "晴", "月", "晶", "卿", "可", "青", "灵", "慧", "盈", "眉", "艳", "凤", "贞", "叶", "钰", "嘉", "黛", "怡", "情", "梦", "悦", "宁", "欣", "容", "丹", "颜", "影", "音", "纯", "思", "丝", "纤", "舒", "伊", "依", "文", "心", "然", "冉", "宛", "玉", "雨", "安琪", "安娴", "安祯", "奥雅", "碧菡", "碧琳", "碧莹", "碧玉", "冰冰", "冰心", "冰莹", "博敏", "博雅", "布欣", "采莲", "采薇", "采萱", "彩妍", "婵娟", "朝雨", "琛丽", "琛瑞", "楚楚", "楚云", "春芳", "春娇", "春兰", "春岚", "春梅", "春桃", "春晓", "春雪", "春燕", "春英", "春雨", "淳静", "淳雅", "翠茵", "丹丹", "丹彤", "丹溪", "笛韵", "蝶梦", "丁兰", "冬梅", "端敏", "端雅", "多思", "朵儿", "尔雅", "方雅", "方仪", "芳芳", "芳菲", "芳蕙", "芳茵", "飞雪", "飞燕", "菲菲", "芬菲", "丰熙", "丰雅", "芙蓉", "歌阑", "格格", "古兰", "古香", "古韵", "谷雪", "桂月", "桂芝", "含娇", "含文", "含香", "含秀", "含玉", "涵涵", "涵韵", "寒梅", "和静", "和煦", "和暄", "和雅", "和怡", "弘丽", "弘雅", "红叶", "虹英", "虹颖", "虹影", "虹雨", "虹玉", "华婉", "华芝", "怀慕", "怀思", "怀玉", "欢欣", "会雯", "会欣", "惠然", "惠心", "慧君", "慧秀", "慧雅", "慧艳", "慧英", "慧颖", "慧语", "慧月", "慧云", "蕙兰", "蕙若", "吉玟", "吉敏", "吉欣", "季雅", "霁芸", "佳惠", "佳思", "佳文", "佳妍", "佳悦", "嘉言", "嘉怡", "嘉音", "嘉颖", "嘉玉", "嘉月", "嘉悦", "嘉云", "江雪", "姣姣", "姣妍", "皎月", "洁雅", "洁玉", "今歌", "今瑶", "今雨", "金玉", "金枝", "锦诗", "锦欣", "瑾瑶", "菁菁", "晶晶", "晶灵", "晶滢", "靓影", "静涵", "静恬", "静婉", "静娴", "静秀", "静雅", "静逸", "静云", "菊月", "娟娟", "君雅", "筠溪", "筠心", "俊慧", "俊雅", "可可", "可儿", "可佳", "可心", "琨瑶", "琨瑜", "兰芳", "兰蕙", "兰梦", "兰英", "兰月", "兰芝", "岚翠", "岚风", "岚岚", "蓝尹", "乐心", "乐欣", "乐怡", "乐悦", "丽芳", "丽华", "丽佳", "丽雅", "丽玉", "丽泽", "伶俐", "伶伶", "灵秀", "灵萱", "灵雨", "灵韵", "玲琳", "玲玲", "玲珑", "玲然", "凌晓", "凌雪", "铃语", "流婉", "流逸", "柳思", "珑玲", "芦雪", "罗绮", "洛妃", "洛灵", "蒙雨", "梦凡", "梦菲", "梦秋", "梦丝", "梦影", "梦雨", "梦月", "梦云", "米雪", "淼淼", "妙婧", "妙晴", "妙思", "妙颜", "妙意", "妙音", "妙珍", "玟丽", "玟玉", "珉瑶", "闵雨", "明煦", "明艳", "鸣晨", "鸣玉", "木兰", "牧歌", "慕梅", "慕诗", "慕思", "慕悦", "暮雨", "暮芸", "娜兰", "囡囡", "霓云", "凝雪", "凝雨", "浓绮", "暖暖", "沛珊", "佩兰", "佩杉", "佩玉", "佩珍", "嫔然", "品韵", "平婉", "平晓", "平心", "平雅", "平莹", "萍雅", "萍韵", "璞玉", "其雨", "奇文", "奇颖", "颀秀", "琦巧", "琦珍", "琪华", "启颜", "绮怀", "绮丽", "绮梦", "绮思", "绮艳", "绮玉", "绮云", "千秋", "千叶", "芊丽", "芊芊", "茜茜", "倩语", "琴心", "琴轩", "琴雪", "琴音", "琴韵", "卿月", "卿云", "清涵", "清华", "清绮", "清秋", "清心", "清雅", "清妍", "清一", "清怡", "清逸", "清韵", "情韵", "晴画", "晴岚", "晴霞", "晴雪", "琼芳", "琼岚", "琼诗", "琼思", "琼怡", "琼音", "琼英", "秋芳", "秋华", "秋露", "秋彤", "秋英", "秋颖", "秋玉", "秋月", "秋芸", "曲静", "曲文", "冉冉", "苒苒", "荏苒", "任真", "蓉蓉", "融雪", "如冰", "如心", "如雪", "如仪", "如意", "如云", "茹薇", "茹雪", "茹云", "瑞灵", "瑞绣", "瑞云", "瑞芝", "若华", "若兰", "若彤", "若英", "若云", "三春", "三姗", "三诗", "沙羽", "沙雨", "姗姗", "珊珊", "韶仪", "邵美", "诗诗", "诗兰", "诗蕾", "诗蕊", "诗文", "施诗", "世韵", "书慧", "书萱", "书仪", "书云", "淑兰", "淑然", "双双", "双玉", "水晶", "水悦", "水芸", "丝柳", "丝萝", "丝琦", "丝微", "丝雨", "思涵", "思慧", "思佳", "思嘉", "思琳", "思敏", "思琪", "思若", "思思", "思彤", "思溪", "思雅", "思怡", "思雨", "思语", "思云", "素欣", "桃雨", "陶宜", "天心", "天欣", "天音", "天韵", "恬欣", "恬雅", "恬悦", "甜恬", "听然", "听云", "婷美", "婷然", "婷婷", "婷秀", "婷玉", "彤蕊", "彤彤", "彤雯", "彤霞", "彤云", "桐欣", "童彤", "童童", "童欣", "宛儿", "宛畅", "宛曼", "宛妙", "婉清", "婉然", "微婉", "微熹", "微月", "蔚然", "文思", "文心", "文瑶", "文漪", "问筠", "问梅", "问萍", "希月", "希彤", "惜雪", "惜玉", "喜儿", "霞飞", "夏兰", "夏彤", "夏雪", "夏月", "仙仪", "仙媛", "仙韵", "娴婉", "娴雅", "献玉", "香洁", "香梅", "香馨", "香雪", "湘灵", "湘云", "宵雨", "箫吟", "小谷", "小琴", "小雯", "小瑜", "晓兰", "晓彤", "晓桐", "晓燕", "笑雯", "笑笑", "笑妍", "心香", "心宜", "心怡", "心语", "忻忻", "新雪", "新雅", "新雨", "歆然", "杏儿", "秀竹", "轩秀", "萱彤", "玄静", "玄雅", "雪冰", "雪儿", "雪曼", "雪晴", "雪艳", "雪羽", "寻芳", "雅琴", "雅诗", "晏如", "依秋", "依然", "以晴", "倚云", "忆雪", "莺莺", "盈盈", "雨彤", "语诗", "月灵", "月怡", "云梦", "云溪", "云霞", "云心", "云英", "韵诗", "贞怡", "贞韵", "芷兰", "芷琪", "芷若", "珠雨", "梓倩", "梓柔", "梓珊", "梓萱", "梓瑶", "梓云", "紫琼", "紫薇"];
        var str = "";
        var fistNames: Array<string> = sex == 1 ? first_name_a_ : first_name_b_;
        var lastNames: Array<string> = sex == 1 ? last_name_a_ : last_name_b_;
        var fistrand = GMath.randRange(0, fistNames.length - 1);
        var lastrand = GMath.randRange(0, lastNames.length - 1);
        var signrand = GMath.randRange(0, sign_.length - 1);
        if (fistNames[fistrand] != null && sign_[signrand] != null && lastNames[lastrand] != null) {
            str = fistNames[fistrand] + sign_[signrand] + lastNames[lastrand];
        }
        else
            this.RandNameBySex(sex);
        return str;
    }

    /**
     * 复制值， 将data的每一个字段的值复制到target（结构）中对应的公共属性 
     * @param target 目标结构
     * @param data 原数据
     * 
     */		
    public static copyValue(target:any, data:any):void
    {
        for (const key in data) {
            if (target.hasOwnProperty(key)) {
                target[key] = data[key];
            }
        }
    }

    /**
     * 获得字符串的长度（汉字、数字、字符等）
     * @static
     * @param {string} val 
     * @returns {number} 
     * @memberof Comp
     */
    public static byteLenght(val:string):number
    {
        var len:number = 0;
        for (var i = 0; i < val.length; i++) {
            var length = val.charCodeAt(i);
            if(length > 255)
            {
                len += 2;
            }
            else
            {
                len += 1;
            }
        }
        return len;
    }
    //两点距离
    public static distance (x1:number ,y1:number , x2:number , y2:number)
    {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    }
    public static BattlePowerList = [];
    private static isWait = false;
    public static ShowBattlePower(lastBattlePower:number , newBattlePower:number)
    {
        if(lastBattlePower == newBattlePower&&lastBattlePower != 0 && newBattlePower != 0) return;
        var table = {last:lastBattlePower ,new :newBattlePower};
        GameUtils.BattlePowerList.push(table);
        if(!GameUtils.isWait)
        {
            GameUtils.isWait = true;
            Laya.timer.once(1500,GameUtils, function()
            {
                GameUtils.isWait = false;
                UIManager.instance.openUI(UIID.BATTLE_POWER_PANEL);
            });
        }
    }
    /**
     * 获得坐标相对屏幕中心的相对位置
     * @param x 
     * @param y 
     */
    public static getCenterScreenPos(x,y):Laya.Point
    {
        var delatX = 0;
        var delatY = 0;
        delatX =  Laya.stage.width/2-(GameConfig.SCREEN_WIDTH/2 - x);
        delatY =  Laya.stage.height/2-(GameConfig.SCREEN_HEIGHT/2 - y);
        return new Laya.Point(delatX,delatY);
    }
    /**
     * 获得坐标相对屏幕右边上角的相对位置
     * @param x 
     * @param y 
     */
    public static getRightTopScreenPos(x,y):Laya.Point
    {
        var delatX = 0;
        var delatY = y;
        delatX =  Laya.stage.width-(GameConfig.SCREEN_WIDTH - x);
        //delatY =  Laya.stage.height-(GameConfig.SCREEN_HEIGHT - y);
        return new Laya.Point(delatX,delatY);
    }
    /**
     * 获得坐标相对屏幕右边下角的相对位置
     * @param x 
     * @param y 
     */
    public static getRightBottomScreenPos(x,y):Laya.Point
    {
        var delatX = 0;
        var delatY = 0;
        delatX =  Laya.stage.width-(GameConfig.SCREEN_WIDTH - x);
        delatY =  Laya.stage.height-(GameConfig.SCREEN_HEIGHT - y);
        return new Laya.Point(delatX,delatY);
    }
    /**
     * 增加场景选择非玩家obj
     */
    public static SceneSelectObjs = [];
    public static goToPos:any = {};

    public static DoClickSelectSceneObj(targetId: number, args: any[] , role:RoleView)
    {
        if(args[1] instanceof AoiInfo)
        {
            var aoiInfo:AoiInfo = args[1];
            var info = aoiInfo.getInfo(RoleType.OBJ_MONSTER);
            if(info.ObjType != RoleType.OBJ_MONSTER )
            return;
        }
        var isSame = false;
        for (let i = 0; i < this.SceneSelectObjs.length; i++) {
            const element = this.SceneSelectObjs[i];
            if(element.targetId == targetId)
            {
                isSame = true;
                break;
            }
        }
        if(!isSame)
        this.SceneSelectObjs.push({targetId:targetId , args:args , role:role});
    }

    public static CheckLocalPlayerGotoSceneObj(localPlayer:Role)
    {
        if(!localPlayer.isLocalPlayer)return;
        if(SGameData.instance.PLAYFIGHTREPORT)
        {
            this.SceneSelectObjs = [];
            return;
        }
        if(this.SceneSelectObjs.length == 0) return;
        if(!localPlayer)
        {
            this.SceneSelectObjs = [];
            return;
        }
        else
        {
            if(localPlayer.isMoveing) return;
            var isCloser = false;
            for (let i = 0; i < this.SceneSelectObjs.length; i++) {
                const data = this.SceneSelectObjs[i];
                var _role:RoleView = data.role;
                var size: Laya.Point = _role.getBodyRealSize();
                var dis = this.distance(_role.px , _role.py , localPlayer.px , localPlayer.py);
                var length = Math.min(size.x ,size.y);
                if(length/2 > 96)
                {
                    length = 96;
                }
                if(dis <= length)
                {
                    isCloser = true;
                    break
                }
            }
            if(!isCloser)
            {
                this.SceneSelectObjs = [];
                return;
            }
        }
        
        
        if(this.SceneSelectObjs.length > 1)
        {
            UIManager.instance.openUI(UIID.SELECT_SCENE_OBJ , [this.SceneSelectObjs]);
        }
        else
        {
            var data = this.SceneSelectObjs[0];
            var sheet = data.args[0];
            var aoiInfo:AoiInfo = data.args[1];
            var _targetId = aoiInfo.getInfo(RoleType.OBJ_MONSTER).ObjId;
            //等级过高的提示
            var showStr= "是否挑战" + sheet.name + "？" + "<br/>";
            var banStr = "";
            var banList = [];
            if(sheet.tips > 0){
                var teamList = STeamData.instance.CurrentTeamInfo.TeamRoleInfoDis.values;
                if(teamList.length > 0){
                    for (let i = 0; i < STeamData.instance.CurrentTeamInfo.TeamRoleInfoDis.values.length; i++) {
                        const element = STeamData.instance.CurrentTeamInfo.TeamRoleInfoDis.values[i];
                        if(element.level >= sheet.tips){
                            banList.push(element.name);
                        }
                    }
                }else{
                    if(SRoleData.instance.info.Lv >= sheet.tips){
                        banList.push(SRoleData.instance.roleName);
                    }
                }
            }
            if(banList.length > 0){
                for (let i = 0; i < banList.length; i++) {
                    banStr += (i==0 ? "" : "、");
                    banStr += HtmlUtils.addColor(banList[i],"#ff0000",20);
                }
                banStr += "等级过高，他们将无法获得奖励";
            }
            Alert.show(showStr + banStr,this,()=>{
                CommonControl.instance.checkFightSceneObj(_targetId);
            },null,null,null,true);
        }
        this.SceneSelectObjs = [];
    }
}