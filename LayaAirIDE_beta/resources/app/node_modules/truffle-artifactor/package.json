{
  "_args": [
    [
      {
        "raw": "truffle-artifactor@^3.0.6",
        "scope": null,
        "escapedName": "truffle-artifactor",
        "name": "truffle-artifactor",
        "rawSpec": "^3.0.6",
        "spec": ">=3.0.6 <4.0.0",
        "type": "range"
      },
      "E:\\Mine\\Project\\git\\laya\\dawawa\\layaairide_master\\resources\\app\\node_modules\\truffle-workflow-compile"
    ]
  ],
  "_from": "truffle-artifactor@>=3.0.6 <4.0.0",
  "_id": "truffle-artifactor@3.0.6",
  "_inCache": true,
  "_location": "/truffle-artifactor",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/truffle-artifactor_3.0.6_1529523790107_0.9779486223636964"
  },
  "_npmUser": {
    "name": "gnidan",
    "email": "nick@gnidan.org"
  },
  "_phantomChildren": {
    "graceful-fs": "4.1.11",
    "jsonfile": "2.4.0",
    "lodash": "4.17.10"
  },
  "_requested": {
    "raw": "truffle-artifactor@^3.0.6",
    "scope": null,
    "escapedName": "truffle-artifactor",
    "name": "truffle-artifactor",
    "rawSpec": "^3.0.6",
    "spec": ">=3.0.6 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/truffle-workflow-compile"
  ],
  "_resolved": "https://registry.npmjs.org/truffle-artifactor/-/truffle-artifactor-3.0.6.tgz",
  "_shasum": "0cbe679c52ec1c1222e5ebc5a2c3591962e791d7",
  "_shrinkwrap": null,
  "_spec": "truffle-artifactor@^3.0.6",
  "_where": "E:\\Mine\\Project\\git\\laya\\dawawa\\layaairide_master\\resources\\app\\node_modules\\truffle-workflow-compile",
  "author": {
    "name": "Tim Coulter"
  },
  "bugs": {
    "url": "https://github.com/trufflesuite/truffle-artifactor/issues"
  },
  "dependencies": {
    "async": "2.6.1",
    "debug": "^3.1.0",
    "fs-extra": "^1.0.0",
    "lodash": "4.17.10",
    "truffle-contract": "^3.0.6",
    "truffle-contract-schema": "^2.0.1",
    "truffle-expect": "^0.0.4"
  },
  "description": "A contract packager for Ethereum and Javascript",
  "devDependencies": {
    "chai": "4.1.2",
    "ganache-cli": "6.1.3",
    "mocha": "5.2.0",
    "require-nocache": "^1.0.0",
    "solc": "0.4.24",
    "temp": "^0.8.3",
    "truffle-blockchain-utils": "^0.0.5",
    "web3": "0.20.6"
  },
  "directories": {},
  "dist": {
    "shasum": "0cbe679c52ec1c1222e5ebc5a2c3591962e791d7",
    "tarball": "https://registry.npmjs.org/truffle-artifactor/-/truffle-artifactor-3.0.6.tgz",
    "fileCount": 13,
    "unpackedSize": 20738
  },
  "homepage": "https://github.com/trufflesuite/truffle-artifactor#readme",
  "license": "MIT",
  "licenseText": "Copyright (c) Consensys LLC, and authors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "benjamincburns",
      "email": "benjamin.c.burns@gmail.com"
    },
    {
      "name": "cgewecke",
      "email": "christophergewecke@gmail.com"
    },
    {
      "name": "gnidan",
      "email": "nick@gnidan.org"
    },
    {
      "name": "tcoulter",
      "email": "tim@timothyjcoulter.com"
    }
  ],
  "name": "truffle-artifactor",
  "optionalDependencies": {},
  "private": false,
  "publishConfig": {
    "access": "public"
  },
  "readme": "# truffle-artifactor (formerly ether-pudding)\n\nThis package saves contract artifacts into into Javascript files that can be `require`'d. i.e.,\n\n```javascript\nvar artifactor = require(\"truffle-artifactor\");\nartifactor.save({/*...*/}, \"./MyContract.sol.js\") // => a promise\n\n// Later...\nvar MyContract = require(\"./MyContract.sol.js\");\nMyContract.setProvider(myWeb3Provider);\nMyContract.deployed().then(function(instance) {\n  return instance.doStuff(); // <-- matches the doStuff() function within MyContract.sol.\n}).then(function(result) {\n  // We just made a transaction, and it's been mined!\n  // We're given transaction hash, logs (events) and receipt for further processing.\n  console.log(result.tx, result.logs, result.receipt);\n});\n```\n\n👏\n\n### Features\n\n* Manages contract ABIs, binaries and deployed addresses, so you don't have to.\n* Packages up build artifacts into `.sol.js` files, which can then be included in your project with a simple `require`.\n* Includes multiple versions of the same contract in a single package, automatically detecting which artifacts to use based on the network version (more on this below).\n* Manages library addresses for linked libraries.\n* Manages events, making them available on a per-transaction basis (no more `event.watch()`!)\n\nThe artifactor uses [truffle-contract](https://github.com/trufflesuite/truffle-contract), which provides features above and beyond `web3`:\n\n* Synchronized transactions for better control flow: transactions won't be considered finished until you're guaranteed they've been mined.\n* Promises. No more callback hell. Works well with `ES6` and `async/await`.\n* Default values for transactions, like `from` address or `gas`.\n* Returning logs, transaction receipt and transaction hash of every synchronized transaction.\n\n### Install\n\n```\n$ npm install truffle-artifactor\n```\n\n### Example\n\nHere, we'll generate a `.sol.js` files given a JSON object like [truffle-schema](https://github.com/trufflesuite/truffle-schema). This will give us a file which we can later `require` into other projects and contexts.\n\n```javascript\nvar artifactor = require(\"truffle-artifactor\");\n\n// See truffle-schema for more info: https://github.com/trufflesuite/truffle-schema\nvar contract_data = {\n  abi: ...,              // Array; required.\n  unlinked_binary: \"...\" // String; optional.\n  address: \"...\"         // String; optional.\n};\n\nartifactor.save(contract_data, \"./MyContract.sol.js\").then(function() {\n  // The file ./MyContract.sol.js now exists, which you can\n  // import into your project like any other Javascript file.\n});\n```\n# API\n\n#### `artifactor.save(options, filename[, extra_options])`\n\nSave contract data as a `.sol.js` file. Returns a Promise.\n\n* `options`: Object. Data that represents this contract:\n\n    ```javascript\n    {\n      contract_name: \"MyContract\",  // String; optional. Defaults to \"Contract\"\n      abi: ...,                     // Array; required.  Application binary interface.\n      unlinked_binary: \"...\",       // String; optional. Binary without resolve library links.\n      address: \"...\",               // String; optional. Deployed address of contract.\n      network_id: \"...\",            // String; optional. ID of network being saved within abstraction.\n      default_network: \"...\"        // String; optional. ID of default network this abstraction should use.\n    }\n    ```\n\n    Note: `save()` will also accept an already `require`'d contract object. i.e.,\n\n    ```javascript\n    var MyContract = require(\"./path/to/MyContract.sol.js\");\n\n    artifactor.save(MyContract, ...).then(...);\n    ```\n\n  In this case, you can use the `extra_options` parameter to specify options that aren't managed by the contract abstraction itself.\n\n* `filename`: Path to save contract file.\n* `extra_options`: Object. Used if you need to specify other options within a separate object, for instance, when a contract abstraction is passed instead of an `options` object.\n\n#### `artifactor.saveAll(contracts, directory, options)`\n\nSave many contracts to the filesystem at once. Returns a Promise.\n\n* `contracts`: Object. Keys are the contract names and the values are `contract_data` objects, as in the `save()` function above:\n\n    ```javascript\n    {\n      \"MyContract\": {\n        \"abi\": ...,\n        \"unlinked_binary\": ...\n      }\n      \"AnotherContract\": {\n        // ...\n      }\n    }\n    ```\n\n* `directory`: String. Destination directory. Files will be saved via `<contract_name>.sol.js` within that directory.\n* `options`: Object. Same options listed in `save()` above.\n\n#### `artifactor.generate(options, networks)`\n\nGenerate the source code that populates the `.sol.js` file. Returns a String.\n\n* `options`: Object. Subset of options listed in the `save()` function above. Expects:\n\n    ```javascript\n  {\n      abi: ...,\n      unlinked_binary: ...\n  }\n  ```\n\n* `networks`: Object. Contains the information about this contract for each network, keyed by the network id.\n\n    ```javascript\n    {\n      \"1\": {        // live network\n        \"address\": ...\n      },\n      \"2\": {        // morden network\n        \"address\": ...\n      },\n      \"1337\": {     // private network\n        \"address\": ...\n      }\n    }\n    ```\n\n### Running Tests\n\n```\n$ npm test\n```\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/trufflesuite/truffle-artifactor.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "3.0.6"
}
